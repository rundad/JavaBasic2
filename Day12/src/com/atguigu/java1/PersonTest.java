package com.atguigu.java1;
/**
 * 
 * @Description 测试类， 方法的重写(override/overwrite)
 * @author runda Email: rli666666@gmail.com
 * @version 
 * @date 2020年6月15日上午11:33:34
 *
 *
 *	重写：子类继承父类以后， 可以对父类同名同参数的方法， 进行覆盖操作
 *
 *	应用：重写以后， 当创建子类对象以后， 通过子类对象调用子父类中的同名同参数的方法时， 实际执行的是子类重写父类的方法
 *
 *	重写的规定：
 *		方法的声明：权限修饰符 返回值类型 方法名(形参列表){
 *								//方法体
 *						}
 *					约定俗称：子类中叫重写的方法，父类中叫被重写的方法
 *				① 子类重写的方法的方法名， 形参列表 与 父类被重写的方法的 方法名和形参列表相同
 *				② 子类重写的方法的权限修饰符 不小于父类被重写的方法的权限修饰符
 *				特殊情况：子类不能重写父类声明为private权限的方法
 *				③ 返回值类型：
 *					> 父类被重写的方法的返回值类型是void， 则子类重写的方法的返回值类型只能是void
 *					> 父类被重写的方法的返回值类型是A类型， 则子类重写的方法的返回值类型可以是A类或A类的子类
 *					> 父类被重写的方法的返回值类型是基本数据类型， 则子类重写的方法的返回值类型必须是相同的基本数据类型
 *				④ 子类重写的方法抛出的异常类型， 不大于父类 被重写的方法抛出的异常类型 (具体放到异常处理的时候讲)
 *			*********************************************************************************************
 *				子类和父类的同名同参数的方法 要么都声明为非static的， 要么都声明为static的
 *
 *	重载的两同一不同：同一个类， 相同方法名
 *				不同：参数列表不同：参数个数不同， 参数类型不同
 *
 *	面试题：区分方法的重载与重写
 *	
 */
public class PersonTest {
	public static void main(String[] args) {
		
		Student s = new Student("计算机科学与技术");
		s.eat();
		s.walk(10);
		
		s.study();
	}
}
