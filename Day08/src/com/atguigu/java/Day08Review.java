package com.atguigu.java;
/**
 * 
 * @Description Day08 Review
 * @author runda Email: rli666666@gmail.com
 * @version 
 * @date 2020年5月28日上午10:14:26
 *
 *	1. 面向对象思想编程内容的三条主线分别是什么
 *		① 类和类的成员： 属性， 方法， 构造器， 代码块， 内部类
 *		② 面向对象的三大特征： 封装， 继承， 多态
 *		③ 其他关键字：this, super, abstract, interface, static, final, package, import
 *	2. 面向对象中类和对象的理解， 并指出二者的关系
 *		① 类： 抽象的， 概念上的内容
 *		② 对象： 实实在在存在的一个个体
 *		对象是由类派生出来的
 *	3. 面向对象思想的体现一， 类和对象的创建和执行操作有哪三步
 *		① 创建类
 *		② 类的实例化
 *		③ 调用对象的机构： 对象.属性， 对象.方法()
 *	4. 画内存分配情况
 *	5. 类的方法中可否定义变量， 是否可以调用属性， 是否可以定义方法， 是否可以调用方法？
 *		① 可以
 *		② 可以
 *		③ 不可以
 *		④ 可以
 *
 *	JVM内存结构
 *	编译完源程序以后， 生成一个或多个字节码文件.class
 *	我们使用JVM中的类的加载器和解释器 对生成的字节码文件进行解释运行
 *	意味着， 需要将字节码文件对应的类加载到内存中， 涉及到内存解析
 *
 *	内存区域
 *	① 方法区： Method Area: 类的加载信息， 常量池， 静态域
 *	② 虚拟机栈: VM Stack: 也是我们通常提到的栈结构， 存储局部变量！
 *	③ 本地方法栈 Native Method Stack: 涉及到底层要调C和C++的时候要调的栈结构
 *	④ 堆 Heap: new出来的结构加载在堆空间中， 对象的属性(非static)加载在堆空间中
 *	⑤ 程序计算器 Program Counter Register
 *
 *	变量的分类
 *	方式一：
 *	基本数据类型:
 *		数值型：
 *			整数类型：byte, short, int, long
 *			浮点类型： float, double
 *		字符型：char
 *		布尔型：boolean
 *	引用数据类型： 类class(字符串在这), 接口interface, 数组array
 *
 *	方式二：
 *	按照类中声明的位置
 *	所有变量：
 *		成员变量：
 *			实例变量：不以static修饰
 *			类变量：以static修饰
 *		局部变量：
 *			形参：方法， 构造器中定义的变量
 *			方法局部变量：在方法内定义
 *			代码块局部变量： 在代码块内定义
 */
public class Day08Review {

}
